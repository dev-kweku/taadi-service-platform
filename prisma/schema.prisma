// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]
  reviews  Review[]
  services Service[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  services    Service[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  providerId String
  provider   User            @relation(fields: [providerId], references: [id])
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])

  bookings Booking[]
  reviews  Review[]
}

model Booking {
  id         String        @id @default(cuid())
  status     BookingStatus @default(PENDING)
  startTime  DateTime
  endTime    DateTime
  notes      String?
  address    String?
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  clientId  String
  client    User    @relation(fields: [clientId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  review Review?
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  clientId String
  client   User   @relation(fields: [clientId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}
